From 7b735f1bca63cee550630b51f97969117826376c Mon Sep 17 00:00:00 2001
From: Ondrej Kubik <ondrej.kubik@canonical.com>
Date: Fri, 6 Jan 2023 01:07:28 +0000
Subject: [PATCH] patches to support snap strict confinement

This mostly tries to avoid any calls to set uid and gid on the files
which is not permitted in the strict confinement.

Signed-off-by: Ondrej Kubik <ondrej.kubik@canonical.com>
---
 src/node_credentials.cc | 28 ++++++++++++++++++++++++----
 src/node_file.cc        | 18 ++++++++++++------
 2 files changed, 36 insertions(+), 10 deletions(-)

diff --git a/src/node_credentials.cc b/src/node_credentials.cc
index 80605c9201..5bb7391307 100644
--- a/src/node_credentials.cc
+++ b/src/node_credentials.cc
@@ -46,6 +46,10 @@ bool linux_at_secure() {
 
 namespace credentials {
 
+// helper to discard return value
+template<typename T>
+void discard(const T&) {}
+
 #if defined(__linux__)
 // Returns true if the current process only has the passed-in capability.
 static bool HasOnly(int capability) {
@@ -281,9 +285,13 @@ static void SetGid(const FunctionCallbackInfo<Value>& args) {
   if (gid == gid_not_found) {
     // Tells JS to throw ERR_INVALID_CREDENTIAL
     args.GetReturnValue().Set(1);
-  } else if (setgid(gid)) {
+  } else {
+     // ignore errors
+     discard(setgid(gid));
+/*
     env->ThrowErrnoException(errno, "setgid");
   } else {
+*/
     args.GetReturnValue().Set(0);
   }
 }
@@ -302,9 +310,13 @@ static void SetEGid(const FunctionCallbackInfo<Value>& args) {
   if (gid == gid_not_found) {
     // Tells JS to throw ERR_INVALID_CREDENTIAL
     args.GetReturnValue().Set(1);
-  } else if (setegid(gid)) {
+  } else {
+     // ignore errors
+     discard(setegid(gid));
+/*
     env->ThrowErrnoException(errno, "setegid");
   } else {
+*/
     args.GetReturnValue().Set(0);
   }
 }
@@ -323,9 +335,13 @@ static void SetUid(const FunctionCallbackInfo<Value>& args) {
   if (uid == uid_not_found) {
     // Tells JS to throw ERR_INVALID_CREDENTIAL
     args.GetReturnValue().Set(1);
-  } else if (setuid(uid)) {
+  } else {
+     // ignore errors
+     discard(setuid(uid));
+/*
     env->ThrowErrnoException(errno, "setuid");
   } else {
+*/
     args.GetReturnValue().Set(0);
   }
 }
@@ -344,9 +360,13 @@ static void SetEUid(const FunctionCallbackInfo<Value>& args) {
   if (uid == uid_not_found) {
     // Tells JS to throw ERR_INVALID_CREDENTIAL
     args.GetReturnValue().Set(1);
-  } else if (seteuid(uid)) {
+  } else {
+     // ignore errors
+     discard(seteuid(uid));
+/*
     env->ThrowErrnoException(errno, "seteuid");
   } else {
+*/
     args.GetReturnValue().Set(0);
   }
 }
diff --git a/src/node_file.cc b/src/node_file.cc
index b0aa53420c..c1ef5cdda1 100644
--- a/src/node_file.cc
+++ b/src/node_file.cc
@@ -2785,8 +2785,10 @@ static void Chown(const FunctionCallbackInfo<Value>& args) {
         path.ToStringView());
     FS_ASYNC_TRACE_BEGIN1(
         UV_FS_CHOWN, req_wrap_async, "path", TRACE_STR_COPY(*path))
-    AsyncCall(env, req_wrap_async, args, "chown", UTF8, AfterNoArgs,
-              uv_fs_chown, *path, uid, gid);
+    // AsyncCall(env, req_wrap_async, args, "chown", UTF8, AfterNoArgs,
+    //          uv_fs_chown, *path, uid, gid);
+    AsyncCall(env, req_wrap_async, args, "stat", UTF8, AfterNoArgs,
+             uv_fs_stat, *path);
   } else {  // chown(path, uid, gid)
     THROW_IF_INSUFFICIENT_PERMISSIONS(
         env,
@@ -2794,7 +2796,8 @@ static void Chown(const FunctionCallbackInfo<Value>& args) {
         path.ToStringView());
     FSReqWrapSync req_wrap_sync("chown", *path);
     FS_SYNC_TRACE_BEGIN(chown);
-    SyncCallAndThrowOnError(env, &req_wrap_sync, uv_fs_chown, *path, uid, gid);
+    // SyncCallAndThrowOnError(env, &req_wrap_sync, uv_fs_chown, *path, uid, gid);
+    SyncCall(env, args[2], &req_wrap_sync, "stat", uv_fs_stat, *path);
     FS_SYNC_TRACE_END(chown);
   }
 }
@@ -2823,12 +2826,15 @@ static void FChown(const FunctionCallbackInfo<Value>& args) {
   if (argc > 3) {  // fchown(fd, uid, gid, req)
     FSReqBase* req_wrap_async = GetReqWrap(args, 3);
     FS_ASYNC_TRACE_BEGIN0(UV_FS_FCHOWN, req_wrap_async)
-    AsyncCall(env, req_wrap_async, args, "fchown", UTF8, AfterNoArgs,
-              uv_fs_fchown, fd, uid, gid);
+    // AsyncCall(env, req_wrap_async, args, "fchown", UTF8, AfterNoArgs,
+    //           uv_fs_fchown, fd, uid, gid);
+    AsyncCall(env, req_wrap_async, args, "fstat", UTF8, AfterStat,
+              uv_fs_fstat, fd);
   } else {  // fchown(fd, uid, gid)
     FSReqWrapSync req_wrap_sync("fchown");
     FS_SYNC_TRACE_BEGIN(fchown);
-    SyncCallAndThrowOnError(env, &req_wrap_sync, uv_fs_fchown, fd, uid, gid);
+    // SyncCallAndThrowOnError(env, &req_wrap_sync, uv_fs_fchown, fd, uid, gid);
+    SyncCall(env, args[2], &req_wrap_sync, "fstat", uv_fs_fstat, fd);
     FS_SYNC_TRACE_END(fchown);
   }
 }
-- 
2.44.0

